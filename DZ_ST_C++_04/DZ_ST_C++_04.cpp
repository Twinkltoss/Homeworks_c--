#include <iostream>
//Задание. 1
//Реализуйте шаблонные функции для поиска максимума,
//минимума, сортировки массива(любым алгоритмом сортировки), двоичного поиска в массиве, замены элемента
//массива на переданное значение.
template <typename T> T Min_Val(T* arr,T size) {
	T min = arr[0];
	for (T i = 0; i < size; i++)	{
		if (min > arr[i])min = arr[i];
	}
	return min;
}
template <typename T> T Max_Val(T* arr, T size) {
	T max = arr[0];
	for (T i = 0; i < size; i++) {
		if (max < arr[i])max = arr[i];
	}
	return max;
}
template <typename T> void Sort(T* arr, T size) {
	for (T i = 0; i < size; i++) {
		for (T j = 0; j < size - 1; j++) {
			if (arr[j] > arr[j + 1]) {
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
			}
		}
	}
}
template <typename T> T Binary_Search(T* arr, T size,T val) {
	int start_index;
	int end_index;
	while()ku ku si ki
}


//Задание.2
//Создайте шаблонный класс матрица.Необходимо реализовать динамическое выделение памяти, очистку памяти,
//заполнение матрицы с клавиатуры, заполнение случайными значениями, отображение матрицы, арифметические
//операции с помощью перегруженных операторов(+, –,
//	*, / ), поиск максимального и минимального элемента.
//Задание. 3
//Есть строка символов, признаком конца, которой является; .В строке могут быть фигурные, круглые, квадратные
//скобки.Скобки могут быть открывающими и закрывающими.
//Необходимо проверить корректность расстановки скобок.
//При этом необходимо, чтобы выполнились следующие
//правила :
//1. Каждая открывающая скобка должна иметь справа
//такую же закрывающую.Обратное также должно быть
//верно.
//2. Открывающие и закрывающие пары скобок разных
//типов должны быть правильно расположены по отношению друг к другу.
//■ Пример правильной строки : ({ x - y - z }*[x + 2y] - (z + 4x));
//■ Пример неправильной строки : ([x - y - z}*[x + 2y) - {z + 4x)].
//Если все правила соблюдены выведите информационное
//сообщение о корректности строки, иначе покажите строку
//до места возникновения первой ошибки.
//Задание 3-1.
//Создать имитационную модель "остановка маршрутных
//такси". Необходимо вводить следующую информацию:
//среднее время между появлениями пассажиров на остановке в разное время суток, среднее время между появлениями маршруток на остановке в разное время суток,
//тип остановки(конечная или нет).Необходимо определить : среднее время пребывание человека на остановке,
//достаточный интервал времени между приходами маршруток, чтобы на остановке находилось не более N людей
//одновременно.Количество свободных мест в маршрутке
//является случайной величиной.
//Задание 3-2.
//Разработать приложение, имитирующее очередь печати
//принтера.Должны быть клиенты, посылающие запросы
//на принтер, у каждого из которых есть свой приоритет.
//Каждый новый клиент попадает в очередь в зависимости
//от своего приоритета.Необходимо сохранять статистику печати(пользователь, время) в отдельной очереди.
//Предусмотреть вывод статистики на экран.
template <typename T>void Print_Arr(T* arr, int size) {
	for (T i = 0; i < size; i++) {
		std::cout << arr[i] << "  ";
	}
}

int main()
{
	int size = 5;
	int* arr = new int[size] {1,12,7,-5,4};

	//std::cout << Min_Val(arr, size);
	//std::cout <<"\n" << Max_Val(arr, size);

	//Print_Arr(arr, size);
	//Sort(arr, size);
	//std::cout << std::endl;
	//Print_Arr(arr, size);


}
